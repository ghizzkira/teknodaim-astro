---
import * as React from "react"
import { Picture } from "astro:assets"

import ParseContent from "@/components/content/parse-content"
import { Icon } from "@/components/ui/icon"
import InfiniteScrollWpPostsAuthor from "@/components/wp/infinite-scroll-wp-posts-author"
import WpFeaturedCategories from "@/components/wp/wp-featured-categories"
import WpListPost from "@/components/wp/wp-list-post"
// import env from "@/env"
// import { api } from "@/lib/trpc/server"
// import type { LanguageType } from "@/lib/validation/language"
import { wpGetPostsByAuthorSlugAction } from "@/lib/wp/action/wp-post"
import type { WpCategoriesDataProps } from "@/lib/wp/action/wp-types"
import {
  wpGetAllUsersAction,
  wpGetUserBySlugAction,
} from "@/lib/wp/action/wp-user"
import MainLayout from "../../../layouts/MainLayout.astro"

export function getStaticPaths() {
  return [{ params: { slug: undefined } }]
}
const { slug } = Astro.params
export const prerender = false

const { user } = await wpGetUserBySlugAction(slug as unknown as string)

// if (!user) {
//   notFound()
// }
// const userData = await api.user.byUsername({
//   username: slug,
//   language: locale,
// })

const { posts, pageInfo } = await wpGetPostsByAuthorSlugAction(
  slug as unknown as string,
  "",
  "ID",
)
const listPost = posts?.slice(0, posts?.length - 1)
const infinitePosts = posts?.slice(posts?.length - 1, posts?.length)
const postJsonLdString = user?.seo?.schema?.raw
const regexId = new RegExp(import.meta.env.PUBLIC_WP_DOMAIN, "g")
const regexEn = new RegExp(import.meta.env.PUBLIC_WP_EN_SUBDOMAIN, "g")
const postJsonLd = postJsonLdString
  ?.replace(regexId, import.meta.env.PUBLIC_DOMAIN)
  ?.replace(regexEn, import.meta.env.PUBLIC_EN_SUBDOMAIN)

// const adsBelowHeader = await api.ad.byPosition("topic_below_header")
// const facebook = userData?.facebook ?? user.seo?.social?.facebook
// const hidePostsData = userData?.x ?? user.seo?.social?.twitter
// const queriesDatas = await api.setting.byKey("filter_post")

// let queriesFilter: { queries: string[] } | undefined

// if (queriesDatas) {
//   const parsedData = JSON.parse(queriesDatas.value)
//   queriesFilter = { ...parsedData }
// }

// const data = await api.setting.byKey("featured_categories")

// let featuredCategories: WpCategoriesDataProps[] | undefined
// if (data) {
//   const parsedData = JSON.parse(data.value)
//   featuredCategories =
//     locale === "id" ? parsedData?.categories?.id : parsedData?.categories?.en
// }
const parsedDescription = ParseContent({
  htmlInput: user?.description!,
  title: user?.name!,
})
---

<MainLayout
  seo={{
    title: user?.name,
    description: user?.description,
    languageAlternates: [
      {
        href: `${import.meta.env.PUBLIC_SITE_URL}/author/${user?.slug}`,
        hrefLang: "id",
      },
      {
        href: `${import.meta.env.NEXT_PUBLIC_EN_SITE_URL}/author/${user?.slug}`,
        hrefLang: "en",
      },
    ],
    canonical: `${import.meta.env.PUBLIC_SITE_URL}/author/${user?.slug}`,
    openGraph: {
      basic: {
        title: user?.name!,
        url: `${import.meta.env.PUBLIC_SITE_URL}/author/${user?.slug}`,
        type: "article",
        image: "",
      },
      optional: {
        description: user?.description,
        locale: "ID",
      },
    },
  }}
>
  <!-- {
    featuredCategories && Array.isArray(featuredCategories) && (
      <div class="block w-full sm:hidden">
        <WpFeaturedCategories categories={featuredCategories} />
      </div>
    )
  } -->
  {
    postJsonLd && (
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: postJsonLd }}
      />
    )
  }
  <section class="fade-up-element flex w-full flex-col pt-5">
    <section
      class="mx-auto flex w-full flex-col md:max-[991px]:max-w-[750px] min-[992px]:max-[1199px]:max-w-[970px] lg:flex-row lg:px-4 min-[1200px]:max-w-[1170px]"
    >
      <!-- {
        adsBelowHeader &&
          adsBelowHeader.length > 0 &&
          adsBelowHeader.map((ad) => {
            return <Ad ad={ad} key={ad.id} />
          })
      } -->
      <div class="order-2 flex w-full flex-col px-4 lg:order-1 lg:w-8/12">
        <div class="mb-10 flex w-full flex-col px-4">
          <div class="space-y-1 text-center md:text-left">
            <h2 class="text-[30px] font-bold">{"About"}</h2>
            <span class="block text-[19px] leading-[1.5]">
              {parsedDescription}
            </span>
          </div>
        </div>
        <div class="mb-[25px] border-l-[3px] border-l-main px-3">
          <h2 class="text-[18px] font-bold leading-[36px] text-main">
            Articles
          </h2>
        </div>
        {listPost && <WpListPost locale={"ID"} posts={listPost} />}
        {
          infinitePosts && pageInfo && (
            <InfiniteScrollWpPostsAuthor
              posts={infinitePosts}
              id={slug}
              pageInfo={pageInfo}
              language={"ID"}
              client:load
            />
          )
        }
      </div>
      <aside
        class="order-1 mb-[30px] w-full bg-muted px-4 lg:order-2 lg:block lg:w-4/12"
      >
        <div class="sticky top-[60px] py-4">
          <div class="mx-auto max-w-[340px]">
            <div class="mb-[30px] flex flex-col items-center">
              <div
                class="relative mb-4 h-32 w-32 shrink-0 overflow-hidden rounded-full bg-gray-300"
              >
                <Picture
                  inferSize
                  class="!h-32 !w-32"
                  alt={user.name}
                  src={user?.avatar.url}
                  sizes=`(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 800px`
                  densities={[1.5, 2]}
                  loading="eager"
                  fetchpriority="high"
                />
              </div>
              <h1 class="text-xl font-bold">{user?.name}</h1>
            </div>
            <div class="flex flex-col space-y-[30px]">
              <!-- {
                userData?.company && (
                  <div>
                    <h2 class="mb-[10px] text-[20px] font-bold">Company</h2>
                    <p class="text-foreground">{userData?.company}</p>
                  </div>
                )
              } -->
              <!-- {
                (facebook ?? hidePostsData) && (
                  <div>
                    <h2 class="mb-[10px] text-[20px] font-bold">Follow</h2>
                    <ul>
                      {facebook && (
                        <li class="mb-2">
                          <NextLink
                            aria-label="Open Facebook"
                            class="flex items-center gap-2"
                            href={facebook}
                          >
                            <span>
                              <Icon.Facebook aria-label="Facebook" />
                            </span>
                            <p class="text-foreground">Facebook</p>
                          </NextLink>
                        </li>
                      )}
                      {hidePostsData && (
                        <li class="mb-2">
                          <NextLink
                            aria-label="Open Twitter"
                            class="flex items-center gap-2"
                            href={hidePostsData}
                          >
                            <Icon.Twitter aria-label="Twitter" />
                            <p class="text-foreground">X</p>
                          </NextLink>
                        </li>
                      )}
                    </ul>
                  </div>
                )
              } -->
              <!-- {
                userData?.education && userData?.education_link && (
                  <div>
                    <h2 class="mb-[10px] text-[20px] font-bold">Education</h2>
                    <NextLink
                      aria-label={`Open ${userData?.education}`}
                      href={userData?.education_link}
                    >
                      <p class="text-foreground">{userData?.education}</p>
                    </NextLink>
                  </div>
                )
              }
              {
                userData?.user_expertises?.length &&
                  userData?.user_expertises?.length > 0 && (
                    <div>
                      <h2 class="mb-[10px] text-[20px] font-bold">Expertise</h2>
                      <ul class="flex max-w-sm flex-wrap gap-3">
                        {userData?.user_expertises?.map((expert) => {
                          return (
                            <li
                              key={expert.id}
                              class="relative select-none rounded-lg bg-gray-100 px-2 py-1 hover:shadow hover:outline hover:outline-main md:text-lg"
                            >
                              <NextLink
                                aria-label={`Open ${expert.title}`}
                                href={expert.link ?? "/"}
                              >
                                {expert.title}
                              </NextLink>
                            </li>
                          )
                        })}
                      </ul>
                    </div>
                  )
              } -->
            </div>
          </div>
        </div>
      </aside>
    </section>
  </section>
</MainLayout>
