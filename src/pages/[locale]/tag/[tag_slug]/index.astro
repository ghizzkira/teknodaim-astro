---
import Tag from "@/components/Template/Tag.astro"
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbSeparator,
} from "@/components/UI/Breadcrumb"
import { Icon } from "@/components/UI/Icon"
import InfiniteScrollWpPostsTag from "@/components/Wp/InfiniteScrollWpPostsTag"
import WpFeaturedCategories from "@/components/wp/wp-featured-categories"
import WpListPost from "@/components/Wp/WpListPost"
import WpPostCardSide from "@/components/Wp/WpPostCardSide"
import MainLayout from "@/layouts/MainLayout.astro"
import { getWpPopularPosts } from "@/lib/action/wp-popular-post"
import { LANGUAGE_TYPE } from "@/lib/validation/language"
import { wpGetPostsByTagIdAction } from "@/lib/wp/action/wp-post"
import {
  wpGetAllTagsAction,
  wpGetTagBySlugAction,
} from "@/lib/wp/action/wp-tag"
import type { WpCategoriesDataProps } from "@/lib/wp/action/wp-types"

 
export const prerender = false

const { tag_slug, locale } = Astro.params

if(!LANGUAGE_TYPE.includes(locale!)){
  return Astro.redirect('/404')
}


const { tag: main_tag, other_lang_tag } = await wpGetTagBySlugAction(tag_slug)

if (!main_tag && !other_lang_tag) {
  return Astro.redirect('/404');
}

let tag 

if (locale === "id") {
  if (
    main_tag &&
    tag_slug === main_tag.slug &&
    main_tag.language.slug.toLocaleLowerCase() === locale
  ) {
    tag = main_tag
  } else if (
    other_lang_tag &&
    tag_slug === other_lang_tag.slug &&
    other_lang_tag.language.slug.toLocaleLowerCase() === locale
  ) {
    tag = other_lang_tag
  } else if (
    main_tag &&
    tag_slug === main_tag.slug &&
    main_tag.language.slug.toLocaleLowerCase() !== locale
  ) {
    if (other_lang_tag)
      Astro.redirect(`/id/tag/${other_lang_tag?.slug}`)
  } 
} else if (locale === "en") {
  if (
    main_tag &&
    tag_slug === main_tag.slug &&
    main_tag.language.slug.toLocaleLowerCase() === locale
  ) {
    tag = main_tag
  } else if (
    other_lang_tag &&
    tag_slug === other_lang_tag.slug &&
    other_lang_tag.language.slug.toLocaleLowerCase() === locale
  ) {
    tag = other_lang_tag
  } else if (
    main_tag &&
    tag_slug === main_tag.slug &&
    main_tag.language.slug.toLocaleLowerCase() !== locale
  ) {
    if (other_lang_tag) {
      Astro.redirect(`/en/tag/${other_lang_tag.slug}`)
    }
  } 
}

if (!tag){
  return Astro.redirect("/")
}
const postJsonLdString = tag?.seo?.schema?.raw
const regexId = new RegExp(import.meta.env.PUBLIC_WP_DOMAIN, "g")
const regexEn = new RegExp(import.meta.env.PUBLIC_WP_EN_SUBDOMAIN, "g")
const postJsonLd = postJsonLdString
  ?.replace(regexId, import.meta.env.PUBLIC_DOMAIN)
  ?.replace(regexEn, import.meta.env.PUBLIC_EN_SUBDOMAIN)

const { posts, pageInfo } = await wpGetPostsByTagIdAction(tag.id)

// FIX: to 7 days
const trendingPosts = await getWpPopularPosts({
  language: locale,
  page: 1,
  perPage: 10,
})
const listPost = posts?.slice(0, posts?.length - 1)
const infinitePosts = posts?.slice(posts?.length - 1, posts?.length)
// const adsBelowHeader = await api.ad.byPosition("topic_below_header")
// const hidePostsData = await api.setting.byKey("filter_post")

// let queriesFilter: { queries: string[] } | undefined

// if (hidePostsData) {
//   const parsedData = JSON.parse(hidePostsData.value)
//   queriesFilter = { ...parsedData }
// }

// const data = await api.setting.byKey("featured_categories")

// let featuredCategories: WpCategoriesDataProps[] | undefined
// if (data) {
//   const parsedData = JSON.parse(data.value)
//   featuredCategories =
//     locale === "id" ? parsedData?.categories?.id : parsedData?.categories?.en
// }
---

<MainLayout locale={locale}  seo={{
  title: tag?.name,
    description: tag?.description,
  languageAlternates: [
    { href: `${import.meta.env.PUBLIC_SITE_URL}/tag/${tag?.slug}`, hrefLang: "id" },
    { href: `${import.meta.env.PUBLIC_EN_SITE_URL}/tag/${tag?.slug}`, hrefLang: "en" },
  ],
  canonical: `${import.meta.env.PUBLIC_SITE_URL}/tag/${tag?.slug}`,
  openGraph: {
    basic: {
      title: tag?.name,
      url:  `${import.meta.env.PUBLIC_SITE_URL}/tag/${tag?.slug}`,
      type: "article",
      image: "",
    },
    optional: {
      description: tag?.description,
      locale: locale,
    },
  },
}}
>
  {
    postJsonLd && (
      <script
      is:inline
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: postJsonLd }}
      />
    )
  }
<Tag posts={posts} pageInfo={pageInfo} category={category} locale="id" trendingPosts={trendingPosts} />
</MainLayout>
