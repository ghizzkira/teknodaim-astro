---
import { Button } from "@/components/UI/Button"
import { Input } from "@/components/UI/Input"
import { Select } from "@/components/UI/Select"
import DashboardLayout from "@/layouts/DashboardLayout.astro"
import { getSettingByKey } from "@/lib/action/setting"
import { wpGetPostsBySearchAction } from "@/lib/wp/action/wp-post"

const user = Astro.locals.user
const DB = Astro.locals.runtime.env.DB
const data = await getSettingByKey(DB, "filter_post")
let settings: { queries: string[] } | undefined
if (data) {
  const parsedData = JSON.parse(data.value)
  settings = { ...parsedData }
}
if (!user?.role.includes("admin" || "author")) {
  Astro.redirect("/")
}
---

<DashboardLayout
  locale="id"
  seo={{
    title: "Filter Post",
    description: "Filter Post",
    canonical: `${import.meta.env.PUBLIC_SITE_URL}/dashboard/filter-post`,
    openGraph: {
      basic: {
        title: `Filter Post | `,
        url: `${import.meta.env.PUBLIC_SITE_URL}/dashboard/filter-post`,
        type: "website",
        image: "",
      },
      optional: {
        description: "Filter Post",
        locale: "ID",
      },
    },
  }}
>
  <style>
    .deleteButton {
      width: 18px;
      height: 18px;
    }
    .deleteIcon {
      width: 18px;
      height: 18px;
      fill: white;
      margin-left: 5px;
    }
  </style>

  <div class="mx-4 flex w-full flex-col">
    <div class="mb-[100px] mt-4 flex items-end justify-end">
      <div class="flex-1 space-y-4">
        <h2 class="mb-10 text-[30px]">Add Featured Posts</h2>
        <div class="relative max-w-lg">
          <form id="setting-form" class="bg-background">
            <div class="mb-4">
              <label class="mr-2">Language:</label>
              <select
                id="language-select"
                class="w-[120px] cursor-pointer appearance-none rounded border border-border bg-background p-2 leading-5 transition-all duration-150 ease-in"
              >
                <option value="id">Indonesia</option>
                <option value="en">English</option>
              </select>
            </div>
            <div class="relative flex min-w-full bg-background lg:w-[400px]">
              <Input id="search-input" type="text" placeholder="Find posts" />
              <Button id="search-clear" className="mr-3 cursor-pointer">
                <svg aria-label="Remove Query" class="w-5 h-5">
                  <use xlink:href="#close-icon"></use>
                </svg>
              </Button>
            </div>
          </form>
          <div id="list-posts" class="my-2 w-full bg-background p-4">
            <h2 class="mb-2 border-b text-[20px]">Posts</h2>
            <div class="flex flex-col space-y-4" id="post-list"></div>
          </div>
        </div>
        <div>
          <h3>Indonesia</h3>
          <ul id="selected-posts-id" class="my-2 flex max-w-xl flex-wrap gap-2">
          </ul>
          <h3>English</h3>
          <ul id="selected-posts-en" class="my-2 flex max-w-xl flex-wrap gap-2">
          </ul>
        </div>
        <button id="submit-btn" aria-label="Submit">Save</button>
      </div>
    </div>
  </div>

  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="close-icon" viewBox="0 0 24 24">
      <path
        d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
      ></path>
    </symbol>
  </svg>

  <script
    is:inline
    type="module"
    define:vars={{ settings, wpGetPostsBySearchAction }}
  >
    document.addEventListener("DOMContentLoaded", function () {
      const form = document.getElementById("setting-form")
      const searchInput = document.getElementById("search-input")
      const searchClearButton = document.getElementById("search-clear")
      const postList = document.getElementById("post-list")
      const selectedPostsIdEl = document.getElementById("selected-posts-id")
      const selectedPostsEnEl = document.getElementById("selected-posts-en")
      const submitButton = document.getElementById("submit-btn")
      const languageSelect = document.getElementById("language-select")

      let selectedLanguage = "id"
      let selectedPosts = []
      let selectedPostsEn = []

      languageSelect.addEventListener("change", (e) => {
        selectedLanguage = e.target.value
      })

      searchInput.addEventListener("input", (e) => {
        const inputValue = e.target.value
        if (inputValue.length > 2) {
          fetchPosts(inputValue, selectedLanguage)
        }
      })

      searchClearButton.addEventListener("click", () => {
        searchInput.value = ""
        postList.innerHTML = ""
      })

      submitButton.addEventListener("click", (e) => {
        e.preventDefault()
        const keyValues = {
          key: "featured_posts",
          value: JSON.stringify({
            posts: {
              id: [...selectedPosts],
              en: [...selectedPostsEn],
            },
          }),
        }
        createSettingAction(keyValues)
      })

      async function fetchPosts(query, language) {
        try {
          const data = await wpGetPostsBySearchActionn(
            query,
            language.toUpperCase(),
          )

          const posts = data?.posts
          postList.innerHTML = ""
          posts.forEach((post) => {
            const postElement = document.createElement("div")
            postElement.className =
              "flex cursor-pointer flex-row justify-between"
            postElement.innerHTML = `
        <h3>${post.title}</h3>
        <button class="rounded-full" aria-label="Add Post">
          <svg aria-label="Add Post" class="w-5 h-5">
            <use xlink:href="#add-icon"></use>
          </svg>
        </button>
      `
            postElement.addEventListener("click", () => {
              handleClick(post)
            })
            postList.appendChild(postElement)
          })
        } catch (error) {
          console.error(error)
        }
      }

      function handleClick(post) {
        if (selectedLanguage === "id") {
          const isDuplicate = selectedPosts.some(
            (selectedPost) => selectedPost.slug === post.slug,
          )
          if (isDuplicate) {
            toast("Post has been added", "warning")
          } else {
            selectedPosts.push(post)
            renderSelectedPosts(selectedPosts, selectedPostsId)
          }
        } else {
          const isDuplicate = selectedPostsEn.some(
            (selectedPost) => selectedPost.slug === post.slug,
          )
          if (isDuplicate) {
            toast("Post has been added", "warning")
          } else {
            selectedPostsEn.push(post)
            renderSelectedPosts(selectedPostsEn, selectedPostsEn)
          }
        }
        searchInput.value = ""
      }

      function renderSelectedPosts(posts, element) {
        element.innerHTML = ""
        posts.forEach((post, index) => {
          const postElement = document.createElement("li")
          postElement.className = "flex items-center"
          postElement.innerHTML = `
      <span>${post.title}</span>
      <button class="ml-1" aria-label="Delete Post">
        <svg aria-label="Delete Post" class="w-5 h-5">
          <use xlink:href="#delete-icon"></use>
        </svg>
      </button>
    `
          postElement.addEventListener("click", () => {
            handleItemClick(index, selectedLanguage)
          })
          element.appendChild(postElement)
        })
      }

      function handleItemClick(index, language) {
        if (language === "id") {
          selectedPosts.splice(index, 1)
          renderSelectedPosts(selectedPosts, selectedPostsId)
        } else {
          selectedPostsEn.splice(index, 1)
          renderSelectedPosts(selectedPostsEn, selectedPostsEn)
        }
      }

      function createSettingAction(keyValues) {
        fetch("/api/setting/upsert", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(keyValues),
        })
          .then((response) => response.json())
          .then((data) => {
            toast("Settings has been updated", "success")
          })
          .catch((error) => {
            console.error(error)
            toast("Failed to update! Please try again later", "danger")
          })
      }
      function toast(message, variant) {
        const toastElement = document.createElement("div")
        toastElement.className = `toast ${variant}`
        toastElement.innerHTML = message
        document.body.appendChild(toastElement)
        setTimeout(() => {
          toastElement.remove()
        }, 3000)
      }
    })
  </script>
</DashboardLayout>
