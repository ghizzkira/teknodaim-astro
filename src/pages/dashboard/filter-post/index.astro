---
import { Button } from "@/components/UI/Button"
import { Input } from "@/components/UI/Input"
import DashboardLayout from "@/layouts/DashboardLayout.astro"
import { getSettingByKey } from "@/lib/action/setting"

const user = Astro.locals.user
const DB = Astro.locals.runtime.env.DB
const data = await getSettingByKey(DB, "filter_post")
let settings: { queries: string[] } | undefined
if (data) {
  const parsedData = JSON.parse(data.value)
  settings = { ...parsedData }
}
if (!user?.role.includes("admin" || "author")) {
 return Astro.redirect("/")
}
---

<DashboardLayout
  locale="id"
  seo={{
    title: "Filter Post",
    description: "Filter Post",
    canonical: `${import.meta.env.PUBLIC_SITE_URL}/dashboard/filter-post`,
    openGraph: {
      basic: {
        title: `Filter Post | `,
        url: `${import.meta.env.PUBLIC_SITE_URL}/dashboard/filter-post`,
        type: "website",
        image: "",
      },
      optional: {
        description: "Filter Post",
        locale: "ID",
      },
    },
  }}
>
  <style>
    .deleteButton {
      width: 18px;
      height: 18px;
    }
    .deleteIcon {
      width: 18px;
      height: 18px;
      fill: white;
      margin-left: 5px;
    }
  </style>

  <div class="mx-4 flex w-full flex-col">
    <div class="mb-[100px] mt-4 flex items-end justify-end">
      <div class="flex-1 space-y-4">
        <h1>Filter Post Settings</h1>
        <hr />
        <form id="filterPostForm" class="space-y-4">
          <div class="space-y-2">
            <label for="query">Query</label>
            <Input
              id="query"
              type="text"
              className="max-w-xl"
              placeholder="Press Enter to enter the query"
            />
            <p id="queryError" style="display: none;">Please enter query</p>
          </div>
        </form>
        <ul id="queryList" class="my-2 flex max-w-xl flex-wrap gap-2"></ul>

        <Button id="submitButton" aria-label="Submit"> Submit </Button>
      </div>
    </div>
  </div>
  <script is:inline type="module" define:vars={{ settings }}>
    document.addEventListener("DOMContentLoaded", function () {
      const queryInput = document.getElementById("query")
      const queryError = document.getElementById("queryError")
      const queryList = document.getElementById("queryList")
      const submitButton = document.getElementById("submitButton")

      let stringArray = settings?.queries ? settings.queries : []
      updateQueryList()

      function updateQueryList() {
        queryList.innerHTML = ""
        stringArray.forEach((item, index) => {
          const li = document.createElement("li")
          li.className = "items-center flex"
          li.innerHTML = `
                    ${item}
                    <span class="ml-1 flex items-center" aria-label="Delete Query">
                        <button class="w-4 w-4 deleteButton" data-index="${index}">
                            <svg class="deleteIcon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M0 0h24v24H0z" fill="none"/>
                                <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59L5 6.41l5.59 5.59-5.59 5.59L6.41 19l5.59-5.59 5.59 5.59L19 17.59l-5.59-5.59L19 6.41z"/>
                            </svg>
                        </button>
                    </span>
                `
          queryList.appendChild(li)
        })
      }

      function handleKeyDown(event) {
        if (event.key === "Enter") {
          event.preventDefault()
          const inputValue = queryInput.value.trim()
          if (inputValue.length > 1) {
            stringArray.push(inputValue)
            updateQueryList()
            queryInput.value = ""
            queryError.style.display = "none"
          } else {
            queryError.style.display = "block"
          }
        }
      }

      function handleDeleteClick(event) {
        const button = event.target.closest("button.deleteButton")
        if (button) {
          const index = parseInt(button.getAttribute("data-index"))
          stringArray.splice(index, 1)
          updateQueryList()
        }
      }

      async function handleSubmit(event) {
        event.preventDefault()
        if (stringArray.length === 0) {
          queryError.style.display = "block"
        } else {
          const data = {
            key: "filter_post",
            value: JSON.stringify({ queries: stringArray }),
          }

          await fetch("/api/setting/upsert", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          })
            .then((response) => {
              if (response.ok) {
                return response.json()
              }
              document.dispatchEvent(
                new CustomEvent("showNotification", {
                  detail: {
                    message: "somthing error went updating filter post",
                    type: "warning",
                  },
                }),
              )
              throw new Error("Network response was not ok.")
            })
            .then((data) => {
              document.dispatchEvent(
                new CustomEvent("showNotification", {
                  detail: {
                    message: "Filter post has been updated",
                    type: "success",
                  },
                }),
              )
            })
            .catch((error) => {
              console.error(
                "There was a problem with the fetch operation:",
                error,
              )
              document.dispatchEvent(
                new CustomEvent("showNotification", {
                  detail: {
                    message: "There was a problem with the fetch operation",
                    type: "warning",
                  },
                }),
              )
            })
        }
      }

      queryInput.addEventListener("keydown", handleKeyDown)
      queryList.addEventListener("click", handleDeleteClick)
      submitButton.addEventListener("click", handleSubmit)
    })
  </script>
</DashboardLayout>
