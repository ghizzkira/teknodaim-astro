---
import JsonLdScript from "@/components/JsonLdScript"
import Tag from "@/components/Template/Tag.astro"

import MainLayout from "@/layouts/MainLayout.astro"
import { getSettingByKey } from "@/lib/action/setting"
import { getWpPopularPostsLast7Days } from "@/lib/action/wp-popular-post"
import { wpGetPostsByTagIdAction } from "@/lib/wp/action/wp-post"
import { wpGetTagBySlugAction } from "@/lib/wp/action/wp-tag"
import type { WpCategoriesDataProps } from "@/lib/wp/action/wp-types"

export const prerender = false

Astro.locals.cache(60)

const DB = Astro.locals.runtime.env.DB
const { tagSlug } = Astro.params

const { tag: mainTag, otherLangTag } = await wpGetTagBySlugAction(tagSlug)

if (!mainTag && !otherLangTag) {
  return Astro.redirect("/404")
}

let tag

if (
  mainTag &&
  tagSlug === mainTag.slug &&
  mainTag.language.slug.toLocaleLowerCase() === "en"
) {
  tag = mainTag
} else if (
  otherLangTag &&
  tagSlug === otherLangTag.slug &&
  otherLangTag.language.slug.toLocaleLowerCase() === "en"
) {
  tag = otherLangTag
} else if (
  mainTag &&
  tagSlug === mainTag.slug &&
  mainTag.language.slug.toLocaleLowerCase() !== "en"
) {
  if (otherLangTag) {
    Astro.redirect(`/en/tag/${otherLangTag.slug}`)
  }
}

if (!tag) {
  return Astro.redirect("/")
}
const postJsonLdString = tag?.seo?.schema?.raw
const regexId = new RegExp(import.meta.env.PUBLIC_WP_DOMAIN, "g")
const regexEn = new RegExp(import.meta.env.PUBLIC_WP_EN_SUBDOMAIN, "g")
const postJsonLd = postJsonLdString
  ?.replace(regexId, import.meta.env.PUBLIC_DOMAIN)
  ?.replace(regexEn, import.meta.env.PUBLIC_EN_SUBDOMAIN)

const { posts, pageInfo } = await wpGetPostsByTagIdAction(tag.id)

const trendingPosts = await getWpPopularPostsLast7Days(DB, {
  language: "en",
  page: 1,
  perPage: 10,
})

// const adsBelowHeader = await api.ad.byPosition("topic_below_header")
// const hidePostsData = await api.setting.byKey("filter_post")

// let queriesFilter: { queries: string[] } | undefined

// if (hidePostsData) {
//   const parsedData = JSON.parse(hidePostsData.value)
//   queriesFilter = { ...parsedData }
// }

// const data = await api.setting.byKey("featured_categories")

const categories = await getSettingByKey(DB, "featured_categories")

let featuredCategories: WpCategoriesDataProps[] | undefined
if (categories) {
  const parsedData = JSON.parse(categories.value)
  featuredCategories = parsedData?.categories?.en
}

interface AlternateLink {
  href: string
  hrefLang: string
}

const langlist = [mainTag, otherLangTag]
const alternatesList: AlternateLink[] = langlist.reduce(
  (acc: AlternateLink[], list) => {
    if (list?.language?.slug.toLocaleLowerCase() === "id") {
      acc.push({
        href: `${import.meta.env.PUBLIC_SITE_URL}/tag/${list?.slug}`,
        hrefLang: list.language.slug,
      })
    }
    return acc
  },
  [],
)
---

<MainLayout
  locale={"en"}
  seo={{
    title: tag?.name,
    description: tag?.description,
    languageAlternates: alternatesList,
    canonical: `${import.meta.env.PUBLIC_SITE_URL}/tag/${tag?.slug}`,
    openGraph: {
      basic: {
        title: tag?.name,
        url: `${import.meta.env.PUBLIC_SITE_URL}/tag/${tag?.slug}`,
        type: "article",
        image: "",
      },
      optional: {
        description: tag?.description,
        locale: "en",
      },
    },
  }}
>
  {postJsonLd && <JsonLdScript jsonld={postJsonLdString} />}
  <Tag
    posts={posts}
    pageInfo={pageInfo}
    locale="en"
    trendingPosts={trendingPosts}
    featuredCategories={featuredCategories}
  />
</MainLayout>
