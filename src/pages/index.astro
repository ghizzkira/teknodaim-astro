---
import Homepage from "@/components/Template/Homepage.astro"
import MainLayout from "@/layouts/MainLayout.astro"
import { getWpPopularPostsLast7Days } from "@/lib/action/wp-popular-post"
import { wpGetAllPostsAction } from "@/lib/wp/action/wp-post"

Astro.locals.cache(60)

const { posts, pageInfo } = await wpGetAllPostsAction("ID")
const DB = Astro.locals.runtime.env.DB
const trendingPosts = await getWpPopularPostsLast7Days(DB, {
  language: "id",
  page: 1,
  perPage: 10,
})
// const data = await apsi.setting.byKey("featured_posts")

// let featured: WpPopularPostProps[] | undefined
// if (data) {
//   const parsedData = JSON.parse(data.value)
//   featured = locale === "id" ? parsedData?.posts?.id : parsedData?.posts?.en
// }

// const filterPostDatas = await api.setting.byKey("filter_post")
// let queriesFilter: { queries: string[] } | undefined

// if (filterPostDatas) {
//   const parsedData = JSON.parse(filterPostDatas.value)
//   queriesFilter = { ...parsedData }
// }

// const hotPosts = await api.wpPopularPost.last1Day({
//   language: locale,
//   page: 1,
//   per_page: 10,
// })

// const featured_posts = featured
//   ? featured
//   : trendingPosts && trendingPosts?.length > 3
//     ? trendingPosts
//     : hotPosts && hotPosts?.length > 3
//       ? hotPosts
//       : null
// const filtered_featured_posts = queriesFilter?.queries
//   ? featured_posts?.filter((post) => {
//       if (queriesFilter?.queries) {
//         for (const word of queriesFilter?.queries) {
//           if (post.title.toLowerCase().includes(word.toLocaleLowerCase())) {
//             return false
//           }
//         }
//       }
//       return true
//     })
//   : featured_posts

// const carouselData = posts?.slice(0, 10)?.filter((post) => {
//   if (queriesFilter?.queries) {
//     for (const word of queriesFilter?.queries) {
//       if (post.title.toLowerCase().includes(word.toLocaleLowerCase())) {
//         return false
//       }
//     }
//   }
//   return true
// })

// const categories = await api.setting.byKey("featured_categories")

// let featuredCategories: WpCategoriesDataProps[] | undefined
// if (categories) {
//   const parsedData = JSON.parse(categories.value)
//   featuredCategories =
//     locale === "id" ? parsedData?.categories?.id : parsedData?.categories?.en
// }
const breadcrumbJson = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: import.meta.env.PUBLIC_SITE_TITLE,
      item: import.meta.env.PUBLIC_SITE_URL,
    },
  ],
}
const searchBoxJsonLd = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  url: import.meta.env.PUBLIC_SITE_URL,
  potentialAction: {
    "@type": "SearchAction",
    target: `${import.meta.env.PUBLIC_SITE_URL}/search?q={search_term_string}`,
    "query-input": "required name=search_term_string",
  },
}
---

<MainLayout
  locale="id"
  seo={{
    title: import.meta.env.PUBLIC_SITE_TITLE ?? "Teknodaim",
    description: import.meta.env.PUBLIC_SITE_DESCRIPTION,
    titleTemplate: "Everlasting Tech Knowledge",
    languageAlternates: [
      { href: `${import.meta.env.PUBLIC_SITE_URL}/en`, hrefLang: "en" },
    ],
    canonical: import.meta.env.PUBLIC_SITE_URL,
    openGraph: {
      basic: {
        title: `${import.meta.env.PUBLIC_SITE_TITLE} | `,
        url: `${import.meta.env.PUBLIC_SITE_URL}/`,
        type: "website",
        image: "",
      },
      optional: {
        description: import.meta.env.PUBLIC_SITE_DESCRIPTION,
        locale: "ID",
      },
    },
  }}
>
  <script
    type="application/ld+json"
    set:html={JSON.stringify(breadcrumbJson)}
  />
  <script
    type="application/ld+json"
    set:html={JSON.stringify(searchBoxJsonLd)}
  />
  <Homepage
    locale="id"
    posts={posts}
    pageInfo={pageInfo}
    trendingPosts={trendingPosts}
  />
</MainLayout>
