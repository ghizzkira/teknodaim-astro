---
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
} from "@/components/ui/breadcrumb"
import { Icon } from "@/components/ui/icon"
import InfiniteScrollWpPostsTag from "@/components/wp/infinite-scroll-wp-posts-tag"
import WpFeaturedCategories from "@/components/wp/wp-featured-categories"
import WpListPost from "@/components/wp/wp-list-post"
import WpPostCardSide from "@/components/wp/wp-post-card-side"
import { wpGetPostsByTagIdAction } from "@/lib/wp/action/wp-post"
import {
  wpGetAllTagsAction,
  wpGetTagBySlugAction,
} from "@/lib/wp/action/wp-tag"
import type { WpCategoriesDataProps } from "@/lib/wp/action/wp-types"
import MainLayout from "../../../layouts/MainLayout.astro"

export function getStaticPaths() {
  return [{ params: { tag_slug: undefined } }]
}
const { tag_slug } = Astro.params

const { tag: main_tag, other_lang_tag } = await wpGetTagBySlugAction(tag_slug)

// if (!main_tag && !other_lang_tag) {
//   notFound()
// }

let tag = main_tag

// if (locale === "id") {
//   if (
//     main_tag &&
//     tag_slug === main_tag.slug &&
//     main_tag.language.slug.toLocaleLowerCase() === locale
//   ) {
//     tag = main_tag
//   } else if (
//     other_lang_tag &&
//     tag_slug === other_lang_tag.slug &&
//     other_lang_tag.language.slug.toLocaleLowerCase() === locale
//   ) {
//     tag = other_lang_tag
//   } else if (
//     main_tag &&
//     tag_slug === main_tag.slug &&
//     main_tag.language.slug.toLocaleLowerCase() !== locale
//   ) {
//     if (other_lang_tag)
//       redirect(`/tag/${other_lang_tag?.slug}`, RedirectType.replace)
//   } else if (
//     other_lang_tag &&
//     tag_slug === other_lang_tag.slug &&
//     other_lang_tag.language.slug.toLocaleLowerCase() !== locale
//   ) {
//     if (main_tag) {
//       redirect(`/tag/${main_tag.slug}`, RedirectType.replace)
//     }
//   }
// } else if (locale === "en") {
//   if (
//     main_tag &&
//     tag_slug === main_tag.slug &&
//     main_tag.language.slug.toLocaleLowerCase() === locale
//   ) {
//     tag = main_tag
//   } else if (
//     other_lang_tag &&
//     tag_slug === other_lang_tag.slug &&
//     other_lang_tag.language.slug.toLocaleLowerCase() === locale
//   ) {
//     tag = other_lang_tag
//   } else if (
//     main_tag &&
//     tag_slug === main_tag.slug &&
//     main_tag.language.slug.toLocaleLowerCase() !== locale
//   ) {
//     if (other_lang_tag) {
//       redirect(`/tag/${other_lang_tag.slug}`, RedirectType.replace)
//     }
//   } else if (
//     other_lang_tag &&
//     tag_slug === other_lang_tag.slug &&
//     other_lang_tag.language.slug.toLocaleLowerCase() !== locale
//   ) {
//     if (main_tag) {
//       redirect(`/tag/${main_tag.slug}`, RedirectType.replace)
//     }
//   }
// }

const postJsonLdString = tag?.seo?.schema?.raw
const regexId = new RegExp(import.meta.env.NEXT_PUBLIC_WP_DOMAIN, "g")
const regexEn = new RegExp(import.meta.env.NEXT_PUBLIC_WP_EN_SUBDOMAIN, "g")
const postJsonLd = postJsonLdString
  ?.replace(regexId, import.meta.env.NEXT_PUBLIC_DOMAIN)
  ?.replace(regexEn, import.meta.env.NEXT_PUBLIC_EN_SUBDOMAIN)

const { posts, pageInfo } = await wpGetPostsByTagIdAction(tag.id)
// const trendingPosts = await api.wpPopularPost.last7Days({
//   language: locale,
//   page: 1,
//   per_page: 10,
// })
const listPost = posts?.slice(0, posts?.length - 1)
const infinitePosts = posts?.slice(posts?.length - 1, posts?.length)
// const adsBelowHeader = await api.ad.byPosition("topic_below_header")
// const hidePostsData = await api.setting.byKey("filter_post")

// let queriesFilter: { queries: string[] } | undefined

// if (hidePostsData) {
//   const parsedData = JSON.parse(hidePostsData.value)
//   queriesFilter = { ...parsedData }
// }

// const data = await api.setting.byKey("featured_categories")

// let featuredCategories: WpCategoriesDataProps[] | undefined
// if (data) {
//   const parsedData = JSON.parse(data.value)
//   featuredCategories =
//     locale === "id" ? parsedData?.categories?.id : parsedData?.categories?.en
// }
---

<MainLayout>
  <!-- {
    postJsonLd && (
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: postJsonLd }}
      />
    )
  } -->
  <!-- {
    featuredCategories && Array.isArray(featuredCategories) && (
      <div class="block w-full sm:hidden">
        <WpFeaturedCategories categories={featuredCategories} />
      </div>
    )
  } -->
  <section class="fade-up-element flex w-full flex-col">
    <div
      class="relative mb-10 flex flex-col bg-gradient-to-r from-main to-main/80 py-10"
    >
      <div class="absolute top-1 ml-4">
        <!-- {
          adsBelowHeader &&
            adsBelowHeader.length > 0 &&
            adsBelowHeader.map((ad) => {
              return <Ad ad={ad} key={ad.id} />
            })
        } -->
        <!-- <Breadcrumb
          class="text-background"
          separator={(
            <Icon.ChevronRight
              aria-label="Breadcrumb"
              class="text-background"
            />
          )}
        >
          <BreadcrumbItem bold>
            <BreadcrumbLink class="text-background" href="/">
              Home
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbItem currentPage>
            <BreadcrumbLink class="text-background" href={`/${tag?.slug}`}>
              {tag?.name}
            </BreadcrumbLink>
          </BreadcrumbItem>
        </Breadcrumb> -->
      </div>
      <div class="self-center">
        <h1 class="text-2xl text-background">{tag?.name}</h1>
      </div>
    </div>
    <div
      class="mx-auto flex w-full flex-row md:mx-auto md:max-[991px]:max-w-[750px] min-[992px]:max-[1199px]:max-w-[970px] min-[1200px]:max-w-[1170px]"
    >
      <div class="flex w-full flex-col px-4 lg:w-8/12">
        {listPost && <WpListPost locale={"ID"} posts={listPost} />}
        {
          infinitePosts && pageInfo && (
            <InfiniteScrollWpPostsTag
              posts={infinitePosts}
              id={tag?.slug}
              language={"ID"}
              pageInfo={pageInfo}
            />
          )
        }
      </div>
      <aside class="hidden w-4/12 px-4 lg:block">
        <div class="sticky top-8 rounded-xl border border-border p-4">
          <div class="mb-4">
            <h4 class="text-transparent">
              <span
                class="after:absolute after:left-1/2 after:top-[40px] after:ml-[-25px] after:h-[3px] after:w-[50px] after:border after:border-main after:bg-main"
              >
                Trending
              </span>
            </h4>
          </div>
          <!-- {
            trendingPosts?.map((post) => {
              const isWordIncluded = queriesFilter?.queries?.some((word) =>
                post.title.toLowerCase().includes(word.toLowerCase()),
              )
              if (isWordIncluded === true) {
                return null
              }
              return (
                <WpPostCardSide
                  key={post.id}
                  src={post.thumbnail}
                  alt={post.title}
                  uri={`/${post.primary_category_slug}/${post.slug}`}
                  title={post.title}
                />
              )
            })
          } -->
        </div>
      </aside>
    </div>
  </section>
</MainLayout>
