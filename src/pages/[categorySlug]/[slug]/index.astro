---
import React from "react"

import ParseContent from "@/components/content/parse-content"
// import InfiniteScrollWpSinglePost from "@/components/wp/infinite-scroll-wp-single-post"
// import WpFeaturedCategories from "@/components/wp/wp-featured-categories"
import WpPostCardSide from "@/components/wp/wp-post-card-side"
import WpPostContent from "@/components/wp/wp-post-content"
// import { api } from "@/lib/trpc/server"
import { splitReactNodes } from "@/lib/utils/content"
// import type { LanguageType } from "@/lib/validation/language"
import {
  wpGetAllPostsAction,
  // wpGetAllPostsSlugAction,
  wpGetPostBySlugAction,
  wpGetPostsByCategorySlugAction,
} from "@/lib/wp/action/wp-post"
import type { WpCategoriesDataProps } from "@/lib/wp/action/wp-types"
import { splitUriWP, wpPrimaryCategorySlug } from "@/lib/wp/helper"
import MainLayout from "../../../layouts/MainLayout.astro"

export const prerender = false
Astro.response.headers.set(
  "Cache-Control",
  "public, s-maxage=60, stale-while-revalidate=30",
)

const { categorySlug, slug } = Astro.params

const { posts } = await wpGetAllPostsAction("ID")
const { post: main_post, other_lang_post } = await wpGetPostBySlugAction(
  slug as unknown as string,
)
const currentTime = new Date().toLocaleTimeString()

// if (!main_post && !other_lang_post) {
//   notFound()
// }

let post = main_post

// if (locale === "id") {
//   if (
//     main_post &&
//     slug === main_post.slug &&
//     main_post.language.slug.toLocaleLowerCase() === locale
//   ) {
//     post = main_post
//   } else if (
//     main_post &&
//     slug === main_post.slug &&
//     main_post.language.slug.toLocaleLowerCase() !== locale
//   ) {
//     if (other_lang_post?.slug) {
//       const { primaryCategory } = wpPrimaryCategorySlug(
//         other_lang_post?.categories as WpCategoriesDataProps[],
//       )
//       redirect(
//         `/${primaryCategory?.slug}/${other_lang_post?.slug}`,
//         RedirectType.replace,
//       )
//     }
//   }
// } else if (locale === "en") {
//   if (
//     main_post &&
//     slug === main_post.slug &&
//     main_post.language.slug.toLocaleLowerCase() === locale
//   ) {
//     post = main_post
//   } else if (
//     main_post &&
//     slug === main_post.slug &&
//     main_post.language.slug.toLocaleLowerCase() !== locale
//   ) {
//     if (other_lang_post?.slug) {
//       const { primaryCategory } = wpPrimaryCategorySlug(
//         other_lang_post?.categories as WpCategoriesDataProps[],
//       )
//       redirect(
//         `/${primaryCategory?.slug}/${other_lang_post.slug}`,
//         RedirectType.replace,
//       )
//     }
//   }
// }

// if (!post) {
//   redirect("/", RedirectType.replace)
// }

// const trendingPosts = await api.wpPopularPost.last7Days({
//   language: locale,
//   page: 1,
//   per_page: 10,
// })

const regexId = new RegExp(import.meta.env.PUBLIC_WP_DOMAIN, "g")
const regexEn = new RegExp(import.meta.env.PUBLIC_WP_EN_SUBDOMAIN, "g")
const postJsonLdString = post?.seo?.schema?.raw
const postJsonLd = postJsonLdString
  ?.replace(regexId, import.meta.env.PUBLIC_DOMAIN)
  ?.replace(regexEn, import.meta.env.PUBLIC_EN_SUBDOMAIN)

let postData

if (post) {
  postData = {
    id: post.id,
    postId: post.postId,
    content: post.content,
    excerpt: post.excerpt,
    title: post.title,
    authorName: post.author.name,
    authorUrl: post.author.slug,
    authorImg: post.author.avatar.url,
    categories: post.categories,
    featuredImageUrl: post.featuredImage.sourceUrl,
    featuredImageAlt: post.featuredImage.altText,
    featuredImageCaption: post.featuredImage.caption,
    date: post.date,
    slug: post.slug,
    tags: post.tags,
  }
}

const parsedContent = ParseContent({
  htmlInput: post?.content!,
  title: post?.title!,
})

const { firstContent, secondContent } = splitReactNodes(
  React.Children.toArray(parsedContent),
)

const { posts: categoryPosts } = await wpGetPostsByCategorySlugAction(
  categorySlug,
  "",
  "ID",
  post.id,
)

// const adsBelowHeader = await api.ad.byPosition("article_below_header")
// const adsSingleArticleAbove = await api.ad.byPosition(
//   "single_article_above_content",
// )
// const adsSingleArticleBelow = await api.ad.byPosition(
//   "single_article_below_content",
// )
// const adsSingleArticleInline = await api.ad.byPosition(
//   "single_article_middle_content",
// )
// const adsSingleArticlePopUp = await api.ad.byPosition("single_article_pop_up")
// const data = await api.setting.byKey("featured_categories")

// let featuredCategories: WpCategoriesDataProps[] | undefined
// if (data) {
//   const parsedData = JSON.parse(data.value)
//   featuredCategories =
//     locale === "id" ? parsedData?.categories?.id : parsedData?.categories?.en
// }

// let gadgetData
// const gadgetByCategory = await api.gadget.byWpCategorySlug(categorySlug)
// gadgetData = gadgetByCategory
// if (!gadgetData || gadgetData.length < 1) {
//   for (const tag of post.tags) {
//     const gadgetByTag = await api.gadget.byWpTagSlug(tag.slug)
//     if (gadgetByTag && gadgetByTag.length > 0) {
//       gadgetData = gadgetByTag
//     }
//   }
// }
---

<MainLayout>
  {
    postJsonLd && (
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: postJsonLd }}
      />
    )
  }
  <!-- {
    featuredCategories && Array.isArray(featuredCategories) && (
      <div class="block sm:hidden">
        <WpFeaturedCategories categories={featuredCategories} />
      </div>
    )
  } -->
  <div
    class="mx-auto flex w-full pt-5 md:max-[991px]:max-w-[750px] min-[992px]:max-[1199px]:max-w-[970px] min-[1200px]:max-w-[1170px]"
  >
    <!-- <React.Suspense>
      {
        adsBelowHeader &&
          adsBelowHeader.length > 0 &&
          adsBelowHeader.map((ad) => {
            return <Ad ad={ad} key={ad.id} />
          })
      }
    </React.Suspense> -->
  </div>
  <div
    class="fade-up-element mx-auto flex w-full pt-5 md:max-[991px]:max-w-[750px] min-[992px]:max-[1199px]:max-w-[970px] min-[1200px]:max-w-[1170px]"
  >
    <section class="w-full lg:w-8/12">
      <h1>The current time is: {currentTime}</h1>
      {
        postData && (
          <WpPostContent
            isMain={true}
            relatedPosts={categoryPosts}
            postData={postData}
            firstContent={firstContent as React.ReactNode}
            secondContent={secondContent as React.ReactNode}
            locale={"ID"}
          />
        )
      }
      <!-- {
        posts && post && (
          <InfiniteScrollWpSinglePost
            posts={posts}
            post={post}
            locale={"ID"}
            adsBelowHeader={[]}
            adsSingleArticleAbove={[]}
            adsSingleArticleBelow={[]}
            adsSingleArticleInline={[]}
            adsSingleArticlePopUp={[]}
          />
        )
      } -->
    </section>
    <aside class="hidden w-4/12 px-4 lg:block">
      <div class="sticky top-4 rounded-xl border border-border p-4">
        <div class="relative mb-4">
          <div
            class="block text-center after:absolute after:bottom-[-3px] after:left-1/2 after:right-[auto] after:top-[auto] after:ml-[-25px] after:h-[3px] after:w-[50px] after:border after:border-main after:bg-main"
          >
            <span class="block h-[36px] text-main">Trending</span>
          </div>
        </div>
        {
          posts?.map((post) => {
            // const isWordIncluded = queriesFilter?.queries?.some((word) =>
            //   post.title.toLowerCase().includes(word.toLowerCase()),
            // )
            // if (isWordIncluded === true) {
            //   return null
            // }
            return (
              <WpPostCardSide
                key={post.id}
                src={post.thumbnail}
                alt={post.title}
                uri={`/${post.primary_category_slug}/${post.slug}`}
                title={post.title}
              />
            )
          })
        }
      </div>
    </aside>
  </div>
</MainLayout>
