---
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbSeparator,
} from "@/components/UI/Breadcrumb"
import InfiniteScrollWpPostsCategory from "@/components/Wp/InfiniteScrollWpPostsCategory"
import WpListPost from "@/components/Wp/WpListPost.astro"
import WpPostCardSide from "@/components/Wp/WpPostCardSide.astro"
import { cn } from "@/lib/utils/style"
import type { LanguageType } from "@/lib/validation/language"
import type { UpsertWpPopularPost } from "@/lib/validation/wp-popular-post"
import type {
  WpCategoriesDataProps,
  WPPageInfoProps,
  WpSinglePostDataProps,
} from "@/lib/wp/action/wp-types"

interface Props {
  posts?: WpSinglePostDataProps[] | null
  pageInfo?: WPPageInfoProps | null
  locale?: LanguageType
  trendingPosts?: Partial<UpsertWpPopularPost>[]
  category?: WpCategoriesDataProps
}
const { posts, pageInfo, locale, trendingPosts, category } = Astro.props
const listPost = posts?.slice(0, posts?.length - 1)
const infinitePosts = posts?.slice(posts?.length - 1, posts?.length)
---

<!-- {
    featuredCategories && (
      <div class="block sm:hidden">
        <WpFeaturedCategories categories={featuredCategories} />
      </div>
    )
  } -->
<section class="fade-up-element mt-5 flex w-full flex-col">
  <div
    class={cn(
      "relative flex flex-col bg-gradient-to-r from-main/90 to-main py-10",
    )}
  >
    <div class="absolute top-1 ml-4">
      <Breadcrumb className="inline-flex items-center">
        <BreadcrumbItem>
          <BreadcrumbLink className="text-[12px] text-background" href="/">
            Home
          </BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator
          className="inline-flex list-none text-background"
        /><BreadcrumbItem>
          <BreadcrumbLink className="text-[12px] text-background">
            {category?.name}
          </BreadcrumbLink>
        </BreadcrumbItem>
      </Breadcrumb>
    </div>
    <div class="self-center">
      <h1 class="text-[36px] font-bold text-background">
        {category?.name}
      </h1>
    </div>
  </div>
  <!-- {
      adsBelowHeader &&
        adsBelowHeader.length > 0 &&
        adsBelowHeader.map((ad) => {
          return <Ad ad={ad} key={ad.id} />
        })
    } -->
  <!-- {
      filtered_featured_posts && filtered_featured_posts.length > 3 && (
        <div class="fade-up-element mx-auto flex w-full flex-col px-4 py-5 md:max-[991px]:max-w-[750px] min-[992px]:max-[1199px]:max-w-[970px] min-[1200px]:max-w-[1170px]">
          <div class="mb-[30px]">
            <WpListPostFeatured
              locale={locale}
              posts={filtered_featured_posts}
            />
          </div>
        </div>
      )
    } -->
  <div
    class="mx-auto mt-5 flex w-full flex-row md:max-[991px]:max-w-[750px] min-[992px]:max-[1199px]:max-w-[970px] lg:mx-auto lg:px-4 min-[1200px]:max-w-[1170px]"
  >
    <div class="flex w-full flex-col px-4 lg:w-8/12">
      {listPost && <WpListPost locale={locale!} posts={listPost} />}
      {
        infinitePosts && category && pageInfo && (
          <InfiniteScrollWpPostsCategory
            posts={infinitePosts}
            id={category.slug}
            pageInfo={pageInfo}
            language={locale!}
            client:load
          />
        )
      }
    </div>
    <aside class="hidden w-4/12 px-4 lg:block">
      <div class="sticky top-4 rounded-xl border border-border p-4">
        <div class="relative mb-4">
          <h4
            class="block text-center after:absolute after:bottom-[-3px] after:left-1/2 after:right-[auto] after:top-[auto] after:ml-[-25px] after:h-[3px] after:w-[50px] after:border after:border-main after:bg-main"
          >
            <span class="block h-[36px] text-main">Trending</span>
          </h4>
        </div>
        {
          trendingPosts?.map((post) => {
            // const isWordIncluded = queriesFilter?.queries?.some((word) =>
            //   post.title.toLowerCase().includes(word.toLowerCase()),
            // )
            // if (isWordIncluded === true) {
            //   return null
            // }
            return (
              <WpPostCardSide
                src={post?.thumbnail!}
                alt={post?.title!}
                uri={`/${post.primaryCategorySlug}/${post.slug}`}
                title={post?.title!}
                locale={locale!}
              />
            )
          })
        }
      </div>
    </aside>
  </div>
</section>
